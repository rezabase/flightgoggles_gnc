#include <ros/ros.h>
#include <std_msgs/Empty.h>
#include <dynamic_reconfigure/server.h>
#include <flightgoggles_gnc/PID_gainsConfig.h> //generated by dynamic_reconfiguration. Must be called PROJECTNAME/_name_of_cfg_file_ + Config.h
#include <flightgoggles_gnc/PID_gains.h> //Custom message types that I created


flightgoggles_gnc::PID_gains msg; //Use to publish the gain config values
bool publish_now = false;


ros::Timer reset_timer;
float reset_after_sec = 10; //if 0, it never resets
void timerCallback(const ros::TimerEvent& event);        

ros::Publisher pub_reset;




void timerCallback(const ros::TimerEvent& event) //Note: this function requires REZA modifications in flightgoggles_uav_dynamics_node
{
  //Send reset topic to the flightgoggles_dynamic
  std_msgs::Empty myMsg;
  pub_reset.publish(myMsg);
  ROS_INFO(" >>>>> Sent reset <<<<<< ");
}


void dynamic_reconfig_callback(flightgoggles_gnc::PID_gainsConfig &config, uint32_t level) 
{
  ROS_INFO("Reconfigure Request: %f, %f", config.kpPosXY, config.kpPosZ);


  msg.header.stamp = ros::Time::now();
  msg.header.frame_id = "uav/imu";

  msg.kpPosXY = config.kpPosXY;
  msg.kpPosZ = config.kpPosZ;
  msg.KiPosZ = config.KiPosZ;
  msg.kpVelXY = config.kpVelXY;
  msg.kpVelZ = config.kpVelZ;
  msg.kpBank = config.kpBank;
  msg.kpYaw = config.kpYaw;
  msg.kpPQR_x = config.kpPQR_x;
  msg.kpPQR_y = config.kpPQR_y;
  msg.kpPQR_z = config.kpPQR_z;

  msg.Traj_x = config.Traj_x;
  msg.Traj_y = config.Traj_y;
  msg.Traj_z = config.Traj_z;
  msg.Traj_vx = config.Traj_vx;
  msg.Traj_vy = config.Traj_vy;
  msg.Traj_vz = config.Traj_vz;
  msg.Traj_yaw = config.Traj_yaw;

  reset_after_sec = config.TestRunTime; //setting a new reset duration.
  publish_now = true; //Set this to true so the topic "pid_gains_config" gets published.

}



// ----------
// -- MAIN --
// ----------
using namespace flightgoggles_gnc;
int main(int argc, char** argv)
{
  ros::init(argc, argv, "control_manual_tune");
  ros::NodeHandle n;
  
  // Dynamic Reconfiguration
  dynamic_reconfigure::Server<flightgoggles_gnc::PID_gainsConfig> server;
  dynamic_reconfigure::Server<flightgoggles_gnc::PID_gainsConfig>::CallbackType f;
  //f = boost::bind(&FG_Control::dynamic_reconfig_callback, fgc, _1, _2); //NOTE: I'm sending the fgc object reference when callback is the fcg.member function. 
  f = boost::bind(&dynamic_reconfig_callback, _1, _2); //Call this if its a global funciton that isnt a member of any class
  server.setCallback(f);


  ros::Publisher my_msg_pub = n.advertise<flightgoggles_gnc::PID_gains>("pid_gains_config", 1);

  pub_reset = n.advertise<std_msgs::Empty>("/uav/input/reset", 1);
  if(reset_after_sec > 0)
    reset_timer = n.createTimer(ros::Duration(reset_after_sec), timerCallback);

  ros::Rate r(20);
  while(ros::ok()) {
    ros::spinOnce();

    if(publish_now){
      my_msg_pub.publish(msg);
      reset_timer = n.createTimer(ros::Duration(reset_after_sec), timerCallback);

      publish_now = false;
    }

    r.sleep();
  }
}
